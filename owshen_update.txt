diff --git a/Cargo.toml b/Cargo.toml
index 1e71fd1..b7c8b2c 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -29,5 +29,7 @@ home = "0.5.5"
 open = "4"
 lazy_static = "1.4"
 futures = "0.3"
+bip39 = "2.0.0"
 webbrowser = "0.6"
 tower-http = { version = "0.4.4", features = ["cors", "fs"] }
+colored = "2.1.0"
diff --git a/Makefile b/Makefile
index e4980d7..bafdbc9 100644
--- a/Makefile
+++ b/Makefile
@@ -21,7 +21,8 @@ appimage:
 	mkdir -p ~/Owshen-Production.AppDir/usr/share/applications
 	mkdir -p ~/Owshen-Production.AppDir/usr/share/icons
 	mkdir -p ~/Owshen-Production.AppDir/usr/share/owshen/client
-	
+
+
 	cd target/release && cp ./owshen ~/Owshen-Production.AppDir/usr/bin
 
 	cp -r client/build/* ~/Owshen-Production.AppDir/usr/share/owshen/client
@@ -37,7 +38,7 @@ appimage:
 	@echo 'export LD_LIBRARY_PATH="$${HERE}/usr/lib/:$${LD_LIBRARY_PATH:+:$${LD_LIBRARY_PATH}}"' >> ~/Owshen-Production.AppDir/AppRun
 	@echo 'export XDG_DATA_DIRS="$${HERE}/usr/share/$${XDG_DATA_DIRS:+:$${XDG_DATA_DIRS}}"' >> ~/Owshen-Production.AppDir/AppRun
 	@echo '' >> ~/Owshen-Production.AppDir/AppRun
-	@echo 'exec "$${HERE}/usr/bin/owshen" wallet --db "$${HERE}/usr/share/owshen/client/amir.json"' >> ~/Owshen-Production.AppDir/AppRun
+	@echo 'exec "$${HERE}/usr/bin/owshen" "$$@"' >> ~/Owshen-Production.AppDir/AppRun
 	
 	@chmod +x ~/Owshen-Production.AppDir/AppRun
 	
diff --git a/client/src/components/Modal/InProgress.js b/client/src/components/Modal/InProgress.js
index 57a3445..d7345e6 100644
--- a/client/src/components/Modal/InProgress.js
+++ b/client/src/components/Modal/InProgress.js
@@ -2,16 +2,20 @@ import { useState } from "react";
 import Modal from "./Modal";
 import ReactLoading from "react-loading";
 
-const InProgress = ({isOpen ,setIsOpen}) => {
-    
-    return (
-        <Modal title="in progress..." isOpen={isOpen} setIsOpen={setIsOpen} >
-            <h1 className="text-2xl mt-16 mb-10">under development </h1>
-            
-            <ReactLoading className="mx-auto" type="spin" color="green" height={100} width={100} />
+const InProgress = ({ isOpen, setIsOpen }) => {
+  return (
+    <Modal title="In progress..." isOpen={isOpen} setIsOpen={setIsOpen}>
+      <h1 className="text-2xl mt-16 mb-10">Under development. </h1>
 
-        </Modal>
-      );
-}
- 
-export default InProgress;
\ No newline at end of file
+      <ReactLoading
+        className="mx-auto"
+        type="spin"
+        color="green"
+        height={100}
+        width={100}
+      />
+    </Modal>
+  );
+};
+
+export default InProgress;
diff --git a/client/src/components/Tokens/Tokens.js b/client/src/components/Tokens/Tokens.js
index 7de668d..ade3448 100644
--- a/client/src/components/Tokens/Tokens.js
+++ b/client/src/components/Tokens/Tokens.js
@@ -22,10 +22,11 @@ const Tokens = ({ tokensInfo }) => {
         <h1 className="text-3xl text-left mb-7 font-bold">Tokens</h1>
         <ul>
           {tokensInfo.map(({ name, symbol }) => {
+            console.log("name and symbo", name, symbol);
             return (
               <Link
-                to={`${isTest ? "/" : `token/${name}`}`}
-                onClick={() => (isTest ? setIsInprogress(true) : "")}
+                to={`${!isTest ? "/" : `token/${name}`}`}
+                onClick={() => (!isTest ? setIsInprogress(true) : "")}
               >
                 <li className=" flex flex-wrap mb-5 items-center  border-b-2 border-black">
                   <p className="w-1/12 text-left font-bold text-lg">
@@ -44,7 +45,7 @@ const Tokens = ({ tokensInfo }) => {
         </ul>
         <p
           className="text-lg font-bold text-blue-600 cursor-pointer inline-block"
-          onClick={() => (isTest ? setIsInprogress(true) : setIsOpen(true))}
+          onClick={() => (!isTest ? setIsInprogress(true) : setIsOpen(true))}
         >
           +import
         </p>
diff --git a/client/src/components/main/index.js b/client/src/components/main/index.js
index 9fe5cf6..b512205 100644
--- a/client/src/components/main/index.js
+++ b/client/src/components/main/index.js
@@ -67,7 +67,7 @@ const Main = () => {
     { title: "network2", value: "network2" },
   ];
   const [walletName, setWalletName] = useState("");
-  const tokenInfo = [{ name: "owshen", symbol: "DIVE" }];
+  const tokenInfo = [{ name: "Owshen Network", symbol: "DIVE" }];
 
   useEffect(() => {
     axios.get(`${coreEndpoint}/info`).then(({ data }) => {
@@ -80,7 +80,7 @@ const Main = () => {
         dive_abi: data.erc20_abi,
         token_contracts: data.token_contracts,
       });
-      setIsTestHere(data.isTest);
+      setIsTestHere(data.is_test);
       dispatch(
         setOwshen({
           type: "SET_OWSHEN",
@@ -94,7 +94,7 @@ const Main = () => {
           },
         })
       );
-      dispatch(setIsTest(data.isTest));
+      dispatch(setIsTest(data.is_test));
     });
     // eslint-disable-next-line react-hooks/exhaustive-deps
     if (OwshenWallet) {
@@ -141,11 +141,7 @@ const Main = () => {
     OwshenWallet.contract_address,
     OwshenWallet.dive_abi
   );
-  const checkIfTest = () => {
-    if (isTest) {
-      return setIsInprogress(true);
-    }
-  };
+
   const getStealth = async () => {
     if (!address) return toast.error("Connect your wallet first");
     if (!destOwshenWallet) return toast.error("Enter your Destination");
@@ -298,10 +294,10 @@ const Main = () => {
   }
   const copyWalletAddress = () => {
     navigator.clipboard.writeText(OwshenWallet.wallet);
-    toast.success("your wallet address copied");
+    toast.success("Your wallet address has been copied!");
   };
   const canOpenModal = () => {
-    if (isTest) {
+    if (!isTest) {
       return setIsInprogress(true);
     }
     address ? setIsOpen(true) : toast.error("Connect your wallet first");
@@ -400,7 +396,7 @@ const Main = () => {
       </Modal>
       <div style={{ textAlign: "center" }}>
         <div className="mt-10 ">
-          <Tooltip id="copy" place="top" content="copy wallet addres" />
+          <Tooltip id="copy" place="top" content="Copy wallet address" />
           {/* ðŸŒŠ Owshen Wallet ðŸŒŠ */}
           {OwshenWallet.wallet && (
             <button
diff --git a/src/apis/info.rs b/src/apis/info.rs
index c4ba0fd..0dea29d 100644
--- a/src/apis/info.rs
+++ b/src/apis/info.rs
@@ -11,7 +11,7 @@ pub async fn info(
     token_contracts: Vec<TokenInfo>,
     owshen_abi: Abi,
     erc20_abi: Abi,
-    isTest: bool,
+    is_test: bool,
 ) -> Result<Json<GetInfoResponse>, eyre::Report> {
     Ok(Json(GetInfoResponse {
         address,
@@ -20,6 +20,6 @@ pub async fn info(
         owshen_contract,
         owshen_abi,
         token_contracts,
-        isTest,
+        is_test,
     }))
 }
diff --git a/src/apis/send.rs b/src/apis/send.rs
index 9399310..ffa6643 100644
--- a/src/apis/send.rs
+++ b/src/apis/send.rs
@@ -108,7 +108,7 @@ pub async fn send(
                     sender_ephemeral: address_ephemeral.point,
                     receiver_ephemeral: receiver_address_ephemeral.point,
                 })),
-                Err(e) => Err(eyre::Report::msg(
+                Err(_e) => Err(eyre::Report::msg(
                     "Something wrong while creating proof for send",
                 )),
             }
diff --git a/src/apis/withdraw.rs b/src/apis/withdraw.rs
index fa59ee1..9e65706 100644
--- a/src/apis/withdraw.rs
+++ b/src/apis/withdraw.rs
@@ -78,7 +78,7 @@ pub async fn withdraw(
                     commitment: u256_calc_commitment,
                     ephemeral: ephemeral.point,
                 })),
-                Err(e) => Err(eyre::Report::msg(
+                Err(_e) => Err(eyre::Report::msg(
                     "Something wrong while creating proof for withdraw",
                 )),
             }
diff --git a/src/fp.rs b/src/fp.rs
index 4f3f1ef..04143dd 100644
--- a/src/fp.rs
+++ b/src/fp.rs
@@ -4,7 +4,7 @@ use num_bigint::BigUint;
 use num_traits::{Euclid, Num};
 use serde::{de, de::Visitor, Deserialize, Deserializer, Serialize, Serializer};
 use std::fmt;
-use std::ops::Div;
+
 use std::str::FromStr;
 
 #[derive(PrimeField)]
diff --git a/src/hash.rs b/src/hash.rs
index 2796a01..2c8a44c 100644
--- a/src/hash.rs
+++ b/src/hash.rs
@@ -1,6 +1,6 @@
 use crate::fp::Fp;
 use crate::poseidon::poseidon;
-use ff::PrimeField;
+
 
 pub fn hash4(vals: [Fp; 4]) -> Fp {
     poseidon(vals)
diff --git a/src/keys.rs b/src/keys.rs
index 82ab995..5e3dd0c 100644
--- a/src/keys.rs
+++ b/src/keys.rs
@@ -1,7 +1,7 @@
 use crate::fp::Fp;
 use crate::hash::hash4;
 use bip39::Mnemonic;
-use ethers::signers::coins_bip39::mnemonic;
+
 use ff::{Field, PrimeField, PrimeFieldBits};
 use num_bigint::{BigUint, RandBigInt};
 use num_traits::{Num, Zero};
diff --git a/src/main.rs b/src/main.rs
index 2ac218a..2a05bea 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -18,6 +18,7 @@ use axum::{
 use bindings::owshen::{Owshen, Point as OwshenPoint};
 use bindings::simple_erc_20::SimpleErc20;
 use bip39::Mnemonic;
+use colored::Colorize;
 use ethers::prelude::*;
 use eyre::Result;
 use keys::Point;
@@ -40,15 +41,18 @@ use webbrowser;
 #[macro_use]
 extern crate lazy_static;
 
+const GOERLI_ENDPOINT: &str = "https://ethereum-goerli.publicnode.com";
 // Initialize wallet, TODO: let secret be derived from a BIP-39 mnemonic code
 #[derive(StructOpt, Debug)]
 pub struct InitOpt {
-    #[structopt(long, default_value = "http://127.0.0.1:8545")]
+    #[structopt(long, default_value = GOERLI_ENDPOINT)]
     endpoint: String,
     #[structopt(long)]
     db: Option<PathBuf>,
     #[structopt(long)]
     mnemonic: Option<Mnemonic>,
+    #[structopt(long)]
+    test: bool,
 }
 
 // Open web wallet interface
@@ -58,7 +62,7 @@ pub struct WalletOpt {
     db: Option<PathBuf>,
     #[structopt(long, default_value = "8000")]
     port: u16,
-    #[structopt(long, default_value = "http://127.0.0.1:8545")]
+    #[structopt(long, default_value = GOERLI_ENDPOINT)]
     endpoint: String,
     #[structopt(long, help = "Enable test mode")]
     test: bool,
@@ -67,12 +71,14 @@ pub struct WalletOpt {
 }
 #[derive(StructOpt, Debug)]
 pub struct ConfigOpt {
-    #[structopt(long, default_value = "http://127.0.0.1:8545")]
+    #[structopt(long, default_value = GOERLI_ENDPOINT)]
     endpoint: String,
     #[structopt(long)]
     name: String,
     #[structopt(long)]
     config: Option<PathBuf>,
+    #[structopt(long)]
+    test: bool,
 }
 
 // Show wallet info
@@ -95,7 +101,7 @@ pub struct GetInfoResponse {
     owshen_contract: H160,
     owshen_abi: Abi,
     token_contracts: Vec<TokenInfo>,
-    isTest: bool,
+    is_test: bool,
 }
 
 #[derive(Clone, Debug, Serialize, Deserialize, Default)]
@@ -191,6 +197,19 @@ struct Config {
     erc20_abi: Abi,
 }
 
+impl Default for Config {
+    fn default() -> Self {
+        Config {
+            name: String::new(),
+            endpoint: GOERLI_ENDPOINT.to_string(),
+            dive_contract_address: H160::default(),
+            owshen_contract_address: H160::default(),
+            owshen_contract_abi: Abi::default(),
+            erc20_abi: Abi::default(),
+        }
+    }
+}
+
 pub struct Context {
     coins: Vec<Coin>,
     tree: SparseMerkleTree,
@@ -252,7 +271,7 @@ async fn serve_file(file_path: PathBuf) -> impl IntoResponse {
 
 async fn serve_wallet(
     provider: Arc<Provider<Http>>,
-    port: u16,
+    _port: u16,
     priv_key: PrivateKey,
     pub_key: PublicKey,
     owshen_contract: H160,
@@ -400,143 +419,147 @@ impl Into<OwshenPoint> for Point {
     }
 }
 
-async fn initialize_config(endpoint: String, name: String) -> Config {
-    let provider = Provider::<Http>::try_from(endpoint.clone()).unwrap();
-    let provider = Arc::new(provider);
-    println!("Deploying hash function...");
-    let poseidon4_addr = deploy(
-        provider.clone(),
-        include_str!("assets/poseidon4.abi"),
-        include_str!("assets/poseidon4.evm"),
-    )
-    .await
-    .address();
+async fn initialize_config(endpoint: String, name: String, is_test: bool) -> Config {
+    if is_test {
+        let provider = Provider::<Http>::try_from(endpoint.clone()).unwrap();
+        let provider = Arc::new(provider);
+        println!("Deploying hash function...");
+        let poseidon4_addr = deploy(
+            provider.clone(),
+            include_str!("assets/poseidon4.abi"),
+            include_str!("assets/poseidon4.evm"),
+        )
+        .await
+        .address();
 
-    let accounts = provider.get_accounts().await.unwrap();
-    let from = accounts[0];
-
-    println!("Deploying DIVE token...");
-    let dive = SimpleErc20::deploy(
-        provider.clone(),
-        (
-            U256::from_str_radix("1000000000000000000000", 10).unwrap(),
-            String::from_str("dive_token").unwrap(),
-            String::from_str("DIVE").unwrap(),
-        ),
-    )
-    .unwrap()
-    .legacy()
-    .from(from)
-    .send()
-    .await
-    .unwrap();
-    println!("Deploying test tokens...");
-    let test_token = SimpleErc20::deploy(
-        provider.clone(),
-        (
-            U256::from_str_radix("1000000000000000000000", 10).unwrap(),
-            String::from_str("test_token").unwrap(),
-            String::from_str("TEST").unwrap(),
-        ),
-    )
-    .unwrap()
-    .legacy()
-    .from(from)
-    .send()
-    .await
-    .unwrap();
-
-    let second_test_token = SimpleErc20::deploy(
-        provider.clone(),
-        (
-            U256::from_str_radix("1000000000000000000000", 10).unwrap(),
-            String::from_str("test_token").unwrap(),
-            String::from_str("TEST").unwrap(),
-        ),
-    )
-    .unwrap()
-    .legacy()
-    .from(from)
-    .send()
-    .await
-    .unwrap();
-
-    println!("Deploying Owshen contract...");
-    let owshen = Owshen::deploy(provider.clone(), poseidon4_addr)
+        let accounts = provider.get_accounts().await.unwrap();
+        let from = accounts[0];
+
+        println!("Deploying DIVE token...");
+        let dive = SimpleErc20::deploy(
+            provider.clone(),
+            (
+                U256::from_str_radix("1000000000000000000000", 10).unwrap(),
+                String::from_str("dive_token").unwrap(),
+                String::from_str("DIVE").unwrap(),
+            ),
+        )
+        .unwrap()
+        .legacy()
+        .from(from)
+        .send()
+        .await
+        .unwrap();
+        println!("Deploying test tokens...");
+        let test_token = SimpleErc20::deploy(
+            provider.clone(),
+            (
+                U256::from_str_radix("1000000000000000000000", 10).unwrap(),
+                String::from_str("test_token").unwrap(),
+                String::from_str("TEST").unwrap(),
+            ),
+        )
         .unwrap()
         .legacy()
         .from(from)
         .send()
         .await
         .unwrap();
-    let mut token_contracts: Vec<TokenInfo> = Vec::new();
 
-    token_contracts.push(TokenInfo {
-        token_address: test_token.address(),
-        symbol: "WETH".to_string(),
-    });
-    token_contracts.push(TokenInfo {
-        token_address: second_test_token.address(),
-        symbol: "USDC".to_string(),
-    });
-
-    let config = Config {
-        name,
-        endpoint,
-        owshen_contract_address: owshen.address(),
-        owshen_contract_abi: owshen.abi().clone(),
-        dive_contract_address: dive.address(),
-        erc20_abi: dive.abi().clone(),
-    };
+        let second_test_token = SimpleErc20::deploy(
+            provider.clone(),
+            (
+                U256::from_str_radix("1000000000000000000000", 10).unwrap(),
+                String::from_str("test_token").unwrap(),
+                String::from_str("TEST").unwrap(),
+            ),
+        )
+        .unwrap()
+        .legacy()
+        .from(from)
+        .send()
+        .await
+        .unwrap();
 
-    config
+        println!("Deploying Owshen contract...");
+        let owshen = Owshen::deploy(provider.clone(), poseidon4_addr)
+            .unwrap()
+            .legacy()
+            .from(from)
+            .send()
+            .await
+            .unwrap();
+        let mut token_contracts: Vec<TokenInfo> = Vec::new();
+
+        token_contracts.push(TokenInfo {
+            token_address: test_token.address(),
+            symbol: "WETH".to_string(),
+        });
+        token_contracts.push(TokenInfo {
+            token_address: second_test_token.address(),
+            symbol: "USDC".to_string(),
+        });
+
+        return Config {
+            name,
+            endpoint,
+            owshen_contract_address: owshen.address(),
+            owshen_contract_abi: owshen.abi().clone(),
+            dive_contract_address: dive.address(),
+            erc20_abi: dive.abi().clone(),
+        };
+    } else {
+        return Config::default();
+    }
 }
 
-async fn initialize_wallet(endpoint: String, mnemonic: Option<Mnemonic>) -> Wallet {
+async fn initialize_wallet(endpoint: String, mnemonic: Option<Mnemonic>, is_test: bool) -> Wallet {
     let mut token_contracts: Vec<TokenInfo> = Vec::new();
     let provider = Provider::<Http>::try_from(endpoint.clone()).unwrap();
     let provider = Arc::new(provider);
     let accounts = provider.get_accounts().await.unwrap();
-    let from = accounts[0];
-
-    let test_token = SimpleErc20::deploy(
-        provider.clone(),
-        (
-            U256::from_str_radix("1000000000000000000000", 10).unwrap(),
-            String::from_str("test_token").unwrap(),
-            String::from_str("TEST").unwrap(),
-        ),
-    )
-    .unwrap()
-    .legacy()
-    .from(from)
-    .send()
-    .await
-    .unwrap();
-
-    let second_test_token = SimpleErc20::deploy(
-        provider.clone(),
-        (
-            U256::from_str_radix("1000000000000000000000", 10).unwrap(),
-            String::from_str("test_token").unwrap(),
-            String::from_str("TEST").unwrap(),
-        ),
-    )
-    .unwrap()
-    .legacy()
-    .from(from)
-    .send()
-    .await
-    .unwrap();
-
-    token_contracts.push(TokenInfo {
-        token_address: test_token.address(),
-        symbol: "WETH".to_string(),
-    });
-    token_contracts.push(TokenInfo {
-        token_address: second_test_token.address(),
-        symbol: "USDC".to_string(),
-    });
+
+    if is_test {
+        let from = accounts[0];
+        let test_token = SimpleErc20::deploy(
+            provider.clone(),
+            (
+                U256::from_str_radix("1000000000000000000000", 10).unwrap(),
+                String::from_str("test_token").unwrap(),
+                String::from_str("TEST").unwrap(),
+            ),
+        )
+        .unwrap()
+        .legacy()
+        .from(from)
+        .send()
+        .await
+        .unwrap();
+
+        let second_test_token = SimpleErc20::deploy(
+            provider.clone(),
+            (
+                U256::from_str_radix("1000000000000000000000", 10).unwrap(),
+                String::from_str("test_token").unwrap(),
+                String::from_str("TEST").unwrap(),
+            ),
+        )
+        .unwrap()
+        .legacy()
+        .from(from)
+        .send()
+        .await
+        .unwrap();
+
+        token_contracts.push(TokenInfo {
+            token_address: test_token.address(),
+            symbol: "WETH".to_string(),
+        });
+        token_contracts.push(TokenInfo {
+            token_address: second_test_token.address(),
+            symbol: "USDC".to_string(),
+        });
+    }
 
     let entropy = if let Some(m) = mnemonic {
         Entropy::from_mnemonic(m)
@@ -548,7 +571,18 @@ async fn initialize_wallet(endpoint: String, mnemonic: Option<Mnemonic>) -> Wall
         entropy,
         token_contracts,
     };
-    println!("Mnemonic {:?}", wallet.entropy.to_mnemonic().unwrap());
+
+    println!(
+        "{} {}",
+        "Your 12-word mnemonic phrase is:".bright_green(),
+        wallet.entropy.to_mnemonic().unwrap()
+    );
+    println!(
+        "{}",
+        "PLEASE KEEP YOUR MNEMONIC PHRASE IN A SAFE PLACE OR YOU WILL LOSE YOUR FUNDS!"
+            .bold()
+            .bright_red()
+    );
 
     wallet
 }
@@ -558,6 +592,12 @@ async fn main() -> Result<()> {
     let wallet_path = home::home_dir().unwrap().join(".owshen-wallet.json");
     let config_path = home::home_dir().unwrap().join(".config-wallet.json");
 
+    println!(
+        "{} {}",
+        "Your wallet path:".bright_green(),
+        wallet_path.to_string_lossy()
+    );
+
     let opt = OwshenCliOpt::from_args();
 
     match opt {
@@ -565,6 +605,7 @@ async fn main() -> Result<()> {
             endpoint,
             db,
             mnemonic,
+            test,
         }) => {
             let wallet_path = db.unwrap_or(wallet_path.clone());
             let wallet = std::fs::read_to_string(&wallet_path)
@@ -574,7 +615,7 @@ async fn main() -> Result<()> {
                 })
                 .ok();
             if wallet.is_none() {
-                let wallet = initialize_wallet(endpoint, mnemonic).await;
+                let wallet = initialize_wallet(endpoint, mnemonic, test).await;
                 std::fs::write(wallet_path, serde_json::to_string(&wallet).unwrap()).unwrap();
             } else {
                 println!("Wallet is already initialized!");
@@ -584,6 +625,7 @@ async fn main() -> Result<()> {
             endpoint,
             name,
             config,
+            test,
         }) => {
             let config_path = config.unwrap_or(config_path.clone());
             let config = std::fs::read_to_string(&config_path)
@@ -593,7 +635,7 @@ async fn main() -> Result<()> {
                 })
                 .ok();
             if config.is_none() {
-                let config = initialize_config(endpoint, name).await;
+                let config = initialize_config(endpoint, name, test).await;
                 std::fs::write(config_path, serde_json::to_string(&config).unwrap()).unwrap();
             } else {
                 println!("Config is already initialized!");
@@ -622,7 +664,8 @@ async fn main() -> Result<()> {
                 })
                 .ok();
 
-            if let (Some(wallet), Some(config)) = (&wallet, &config) {
+            if let Some(wallet) = &wallet {
+                let config = config.clone().unwrap_or_default();
                 let provider = Provider::<Http>::try_from(config.endpoint.clone()).unwrap();
                 let provider = Arc::new(provider);
                 let priv_key = wallet.entropy.clone().into();
@@ -643,7 +686,7 @@ async fn main() -> Result<()> {
                 .await?;
             } else {
                 if wallet.is_none() {
-                    let wallet = initialize_wallet(endpoint, None).await;
+                    let wallet = initialize_wallet(endpoint, None, test).await;
                     std::fs::write(wallet_path, serde_json::to_string(&wallet).unwrap()).unwrap();
                 } else {
                     println!("Wallet is already initialized!");
@@ -693,11 +736,10 @@ async fn deploy(
 #[cfg(test)]
 mod tests {
     use super::*;
-    use crate::hash::hash4;
-    use bindings::coin_withdraw_verifier::CoinWithdrawVerifier;
+
     use ethers::abi::Abi;
     use ethers::utils::Ganache;
-    use k256::elliptic_curve::consts::U25;
+
     use std::sync::Arc;
 
     use ethers::core::types::Bytes;
